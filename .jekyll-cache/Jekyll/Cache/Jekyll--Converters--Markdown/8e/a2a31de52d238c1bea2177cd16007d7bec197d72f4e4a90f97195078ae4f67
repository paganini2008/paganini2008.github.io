I"8<p>FastJDBC提供了对spring框架中NamedJdbcTemplate类的二次封装，提供一种基于注解方式的API配置方式去操作sql，而不是调用NamedJdbcTemplate的方法去传递sql语句。</p>

<h3 id="安装">安装</h3>
<hr />

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>		<span class="nt">&lt;dependency&gt;</span>
			<span class="nt">&lt;groupId&gt;</span>com.github.paganini2008.springdessert<span class="nt">&lt;/groupId&gt;</span>
			<span class="nt">&lt;artifactId&gt;</span>fastjdbc-spring-boot-starter<span class="nt">&lt;/artifactId&gt;</span>
			<span class="nt">&lt;version&gt;</span>2.0.3<span class="nt">&lt;/version&gt;</span>
		<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>
<p>（以最新版为准）</p>

<h3 id="快速开始">快速开始</h3>
<hr />

<p>下面举几个例子，看看fastjdbc-spring-boot-starter是怎么使用的</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Dao</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">UserDao</span> <span class="o">{</span>

	<span class="nd">@Insert</span><span class="o">(</span><span class="s">"insert into tb_user(username,password,age) values (:username,:password,:age)"</span><span class="o">)</span>
	<span class="kt">int</span> <span class="nf">saveUser</span><span class="o">(</span><span class="nd">@Example</span> <span class="nc">User</span> <span class="n">user</span><span class="o">);</span>

	<span class="nd">@Update</span><span class="o">(</span><span class="s">"update tb_user set username=:username, password=:password where id=:id"</span><span class="o">)</span>
	<span class="kt">int</span> <span class="nf">updateUser</span><span class="o">(</span><span class="nd">@Example</span> <span class="nc">User</span> <span class="n">user</span><span class="o">);</span>

	<span class="nd">@Update</span><span class="o">(</span><span class="s">"delete from tb_user where id=:id"</span><span class="o">)</span>
	<span class="kt">int</span> <span class="nf">deleteUser</span><span class="o">(</span><span class="nd">@Arg</span><span class="o">(</span><span class="s">"id"</span><span class="o">)</span> <span class="kt">int</span> <span class="n">id</span><span class="o">);</span>
	
	<span class="nd">@Batch</span><span class="o">(</span><span class="s">"insert into tb_user(username,password,age) values (:username,:password,:age)"</span><span class="o">)</span>
	<span class="kt">int</span> <span class="nf">batchSaveUser</span><span class="o">(</span><span class="nd">@Args</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">userList</span><span class="o">);</span>

	<span class="nd">@Get</span><span class="o">(</span><span class="s">"select * from tb_user where id=:id"</span><span class="o">)</span>
	<span class="nc">User</span> <span class="nf">getById</span><span class="o">(</span><span class="nd">@Arg</span> <span class="kt">int</span> <span class="n">id</span><span class="o">);</span>
	
	<span class="nd">@Query</span><span class="o">(</span><span class="s">"select * from tb_user order by create_time desc"</span><span class="o">)</span>
	<span class="nc">List</span><span class="o">&lt;</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;&gt;</span> <span class="nf">queryUser</span><span class="o">();</span>

    <span class="nd">@Query</span><span class="o">(</span><span class="s">"select * from tb_user where 1=1 @sql order by create_time desc"</span><span class="o">)</span>
	<span class="nc">List</span><span class="o">&lt;</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;&gt;</span> <span class="nf">queryUserByCondition</span><span class="o">(</span><span class="nd">@Sql</span> <span class="nc">String</span> <span class="n">whereCondition</span><span class="o">,</span> <span class="nd">@Example</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span><span class="nc">Object</span><span class="o">&gt;</span> <span class="n">queryExample</span><span class="o">);</span>

	<span class="nd">@Select</span><span class="o">(</span><span class="s">"select * from tb_user order by create_time desc"</span><span class="o">)</span>
	<span class="nc">ResultSetSlice</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="nf">selectUser</span><span class="o">();</span>

<span class="o">}</span>
</code></pre></div></div>

<p>API很简单，但需要的注意事项：</p>
<ol>
  <li>@Insert 返回的是主键ID, 可以是int或long类型的</li>
  <li>@Update 返回的是受影响的行数，它可以执行insert, update, delete 语句</li>
  <li>@Batch 返回的也是受影响的行数</li>
  <li>@Get 可以返回对象也可以返回单个值(包装类型或基础类型)，设置属性javaType=true即可</li>
  <li>@Example 参数可以是Pojo对象也可以是Map, @Arg表示一个参数，@Args表示多个参数，用于批处理</li>
  <li>@Query 返回列表，其中@Sql表示是动态sql, 比如你可以根据查询条件动态拼装sql</li>
  <li>@Query和@Select很像，@Query，是不分页的，@Select既支持分页，又支持列表，返回ResultSetSlice对象，这个对象异常强大，有兴趣的朋友可以研究一下</li>
  <li>sql语句的写法和Spring框架中NamedParameterJdbcTemplate的写法一致，实质上还是通过它来执行sql语句的
（API具体用法可以参考源码）</li>
</ol>

<p>最后，在你Spring Boot应用中，在你自己的Configuration类上中加入Dao扫描器即可，比如：</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@DaoScan</span><span class="o">(</span><span class="n">basePackages</span> <span class="o">=</span> <span class="s">"com.yourcompany.project.base.dao"</span><span class="o">)</span>
<span class="nd">@Configuration</span><span class="o">(</span><span class="n">proxyBeanMethods</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">YourConfiguration</span> <span class="o">{</span>

<span class="o">}</span>
</code></pre></div></div>
<p>git地址：https://github.com/paganini2008/springdessert.git</p>

:ET